# SecS/GEM Equipment Control System

## Overview
The **SecS/GEM Equipment Control System** is a modular framework designed to manage and control equipment using the SECS/GEM protocol and MQTT messaging. It supports equipment control through both **CLI commands** and **MQTT messages**, providing flexibility for integration with factory automation systems.

---

## Features
- **Equipment Management**: Add, delete, enable, disable, online, and offline equipment.
- **MQTT Integration**: Support for publishing and subscribing to equipment control topics.
- **SECS/GEM Protocol Support**: Handle standard SECS/GEM commands and messages.
- **Command-Line Interface (CLI)**: Perform equipment operations through terminal commands.
- **Configuration Management**: Load settings from JSON configuration files.
- **State Management**: Track equipment states like enabled/disabled and online/offline.
- **Logging and Debugging**: Built-in logging for troubleshooting and monitoring.

---

## Project Structure
```
secsgem/
├── src/
│   ├── main.py                     # Entry point for the application
│   ├── config/
│   │   ├── equipments.json         # Equipment configuration
│   │   ├── mqtt.json               # MQTT configuration
│   │   ├── logging.conf            # Logging configuration
│   ├── core/
│   │   ├── equipment_manager.py    # Equipment management
│   │   ├── host_manager.py         # SECS/GEM host management
│   │   ├── states_manager.py       # State tracking and management
│   │   ├── events/
│   │   │   ├── fcl_event.py        # Event handling for FCL
│   │   │   ├── fclx_event.py       # Event handling for FCLX
│   │   ├── alarms/
│   │   │   ├── fcl_alarm.py        # Alarm handling for FCL
│   │   │   ├── fclx_alarm.py       # Alarm handling for FCLX
│   ├── secs_gem/
│   │   ├── gemhost.py              # SECS/GEM protocol handling
│   │   ├── message_handler.py      # SECS/GEM message processing
│   ├── mqtt/
│   │   ├── mqtt_client.py          # MQTT connection management
│   │   ├── mqtt_handle.py          # MQTT command handling
│   │   ├── mqtt_manager.py         # MQTT topic management
│   ├── cli/
│   │   ├── cli_command.py          # CLI command definitions
│   │   ├── cli_handler.py          # CLI command processing
│   ├── utils/
│   │   ├── logger.py               # Logging utilities
│   │   ├── config_loader.py        # Configuration loading utilities
│   ├── tests/
│   │   ├── test_mqtt.py            # MQTT unit tests
│   │   ├── test_cli.py             # CLI unit tests
│   │   ├── test_manager.py         # Equipment manager tests
│   ├── requirements.txt            # Dependencies
│   ├── Dockerfile                  # Docker build file
│   ├── README.md                   # Project documentation
```

---

## Configuration Files
### 1. **equipments.json**
Manages the equipment configuration and their properties.
```json
{
    "equipments": [
        {
            "name": "Equipment1",
            "enabled": true,
            "online": true
        }
    ]
}
```

### 2. **mqtt.json**
Defines the MQTT broker connection details.
```json
{
    "mqtt": {
        "host": "localhost",
        "port": 1883,
        "keepalive": 60,
        "username": "user",
        "password": "pass"
    }
}
```

---

## Usage

### 1. Command Line Interface (CLI)
```bash
# Add an equipment
python3 main.py add_equipment --name Equipment1

# Enable equipment
python3 main.py enable --name Equipment1

# Get status of all equipment
python3 main.py get_status_all
```

### 2. MQTT Commands
- **Topic**: `equipment/mqttcontrol/Equipment1`
- **Payload**:
```json
{
    "command": "enable"
}
```

---

## Requirements
- Python 3.8+
- Paho MQTT Library
- JSON Configuration Files

### Installation
```bash
pip install -r requirements.txt
```

---

## Testing
Run the unit tests to validate the functionality:
```bash
pytest src/tests/
```

---

## Future Improvements
- Add Web Dashboard for real-time monitoring.
- Implement REST API integration.
- Support for advanced authentication mechanisms.

---

## License
This project is licensed under the MIT License.

---

## Contributors
- Maintainer: [Your Name]
- Contributors: Open for contributions!

