require('dotenv').config();
const axios = require('axios');
const line = require('@line/bot-sdk');

const client = new line.Client({
    channelAccessToken: process.env.CHANNEL_ACCESS_TOKEN,
    channelSecret: process.env.CHANNEL_SECRET,
});

const lastNotifiedTimes = {
    TMD: null,
    USGS: null,
    EMSC: null,
};

// ‚úÖ ‡πÅ‡∏õ‡∏•‡∏á‡∏û‡∏¥‡∏Å‡∏±‡∏î‡πÄ‡∏õ‡πá‡∏ô‡∏ä‡∏∑‡πà‡∏≠‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡πÅ‡∏•‡∏∞ emoji ‡∏ò‡∏á‡∏ä‡∏≤‡∏ï‡∏¥
async function getCountryFlag(lat, lon) {
    try {
        const res = await axios.get('https://nominatim.openstreetmap.org/reverse', {
            params: {
                format: 'json',
                lat,
                lon,
                zoom: 3, // country level
                addressdetails: 1
            },
            headers: { 'User-Agent': 'earthquake-alert-app' }
        });

        if (res.data && res.data.address && res.data.address.country) {
            const country = res.data.address.country;
            const countryCode = res.data.address.country_code;
            const flag = getFlagEmoji(countryCode);
            return { country, flag };
        } else {
            console.error("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡∏à‡∏≤‡∏Å Nominatim API");
            return { country: 'Unknown', flag: '' };
        }
    } catch (err) {
        console.error(`‚ùå reverse geocoding ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: ${err.message}`);
        return { country: 'Unknown', flag: '' };
    }
}

// ‚úÖ ‡πÅ‡∏õ‡∏•‡∏á country code ‡πÄ‡∏õ‡πá‡∏ô flag emoji
function getFlagEmoji(countryCode) {
    const codePoints = countryCode
        .toUpperCase()
        .split('')
        .map(char => 127397 + char.charCodeAt());
    return String.fromCodePoint(...codePoints);
}

function createMapLink(lat, lon) {
    return `https://maps.google.com/?q=${lat},${lon}`;
}

async function fetchTMD() {
    const res = await axios.get('https://data.tmd.go.th/api/DailySeismicEvent/v1/?uid=api&ukey=api12345&format=json');
    const latest = res.data.DailyEarthquakes[0];
    const lat = latest.Latitude;
    const lon = latest.Longitude;

    const { country, flag } = await getCountryFlag(lat, lon);
    return {
        source: 'TMD',
        time: new Date(latest.DateTimeUTC),
        message: `
            ${flag} [TMD] ‡πÅ‡∏ú‡πà‡∏ô‡∏î‡∏¥‡∏ô‡πÑ‡∏´‡∏ß‡πÉ‡∏ô ${country}
            üìÖ ${latest.DateTimeThai}
            üìç ${lat}, ${lon}
            üìè ${latest.Magnitude} ML
            üìå ${latest.TitleThai}
            üó∫Ô∏è ${createMapLink(lat, lon)}
        `.trim()
    };
}

async function fetchUSGS() {
    const res = await axios.get('https://earthquake.usgs.gov/earthquakes/feed/v1.0/summary/all_hour.geojson');
    const latest = res.data.features[0];
    const lat = latest.geometry.coordinates[1];
    const lon = latest.geometry.coordinates[0];
    const mag = parseFloat(latest.properties.mag);


    const { country, flag } = await getCountryFlag(lat, lon);
    return {
        source: 'USGS',
        time: new Date(latest.properties.time),
        message: `
${flag} [USGS] Earthquake in ${country}
üìÖ ${new Date(latest.properties.time).toLocaleString('th-TH')}
üìç ${lat}, ${lon}
üìè ${mag} ML
üìå ${latest.properties.place}
üó∫Ô∏è ${createMapLink(lat, lon)}
        `.trim()
    };
}

async function fetchEMSC() {
    const res = await axios.get('https://www.seismicportal.eu/fdsnws/event/1/query?limit=1&format=json');
    const latest = res.data.features[0];
    const props = latest.properties;
    const coords = latest.geometry.coordinates;
    const lat = coords[1];
    const lon = coords[0];
    const mag = parseFloat(props.mag);

    const { country, flag } = await getCountryFlag(lat, lon);
    return {
        source: 'EMSC',
        time: new Date(latest.properties.time),
        message: `
${flag} [EMSC] Earthquake in ${country}
üìÖ ${new Date(latest.properties.time).toLocaleString('th-TH')}
üìç ${lat}, ${lon}
üìè ${mag} ML
üìå ${latest.properties.flynn_region}
üó∫Ô∏è ${createMapLink(lat, lon)}
        `.trim()
    };
}

// ‚úÖ ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏î‡πâ‡∏ß‡∏¢ line bot
async function sendLineBotMessage(message) {
    await client.pushMessage(process.env.CHANNEL_USERID, {
        type: 'text',
        text: message,
    });
}

let isFirstRun = true; // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÅ‡∏£‡∏Å‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà

// ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
async function checkEarthquakes() {
    try {
        const minMag = parseFloat(process.env.MIN_MAGNITUDE) || 4.5;
        const sources = [fetchTMD, fetchUSGS, fetchEMSC];

        // ‡∏Ç‡πâ‡∏≤‡∏°‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏£‡∏≠‡∏ö‡πÅ‡∏£‡∏Å‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏∏‡∏Å‡πÅ‡∏´‡∏•‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        if (isFirstRun) {
            isFirstRun = false;
            console.log("üïí ‡∏Ç‡πâ‡∏≤‡∏°‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏£‡∏≠‡∏ö‡πÅ‡∏£‡∏Å‡∏à‡∏≤‡∏Å‡∏ó‡∏∏‡∏Å‡πÅ‡∏´‡∏•‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•");
            return; // ‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÉ‡∏ô‡∏£‡∏≠‡∏ö‡πÅ‡∏£‡∏Å
        }

        for (const fetchFn of sources) {
            try {
                const data = await fetchFn();
                const { source, time, message } = data;

                const matchedMag = message.match(/üìè ([\d.]+) ML/);
                const mag = matchedMag ? parseFloat(matchedMag[1]) : 0;

                if (mag >= minMag) {
                    if (!lastNotifiedTimes[source] || time > lastNotifiedTimes[source]) {
                        await sendLineBotMessage(message);
                        lastNotifiedTimes[source] = time;
                        console.log(`üîî ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÉ‡∏´‡∏°‡πà‡∏à‡∏≤‡∏Å ${source} (mag ${mag})`);
                    } else {
                        console.log(`‚úÖ ${source} ‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÄ‡∏´‡∏ï‡∏∏‡∏Å‡∏≤‡∏£‡∏ì‡πå‡πÉ‡∏´‡∏°‡πà`);
                    }
                } else {
                    console.log(`‚ö†Ô∏è ${source} magnitude ${mag} < ${minMag} ‚Äî ‡πÑ‡∏°‡πà‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô`);
                }
            } catch (err) {
                console.error(`‚ùå ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ${fetchFn.name} ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: ${err.message}`);
            }
        }
    } catch (error) {
        console.error('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏£‡∏ß‡∏°:', error.message);
    }
}

function startEarthquakeChecker(interval = 2 * 60 * 1000) {
    setInterval(checkEarthquakes, interval);
    checkEarthquakes(); // run ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
}

module.exports = { startEarthquakeChecker };
